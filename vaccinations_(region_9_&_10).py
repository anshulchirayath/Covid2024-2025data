# -*- coding: utf-8 -*-
"""Vaccinations (Region 9 & 10)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VJYD2qih0MZarhUBBTP3YqxX-qzvCHHO
"""

from google.colab import files
uploaded = files.upload()

import os
print("this too check correct path", os.listdir())

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates

#  Define the 13 columns shared by both vaccination files
col_names = [
    'Vaccine',
    'Geographic Level',
    'Geographic Name',
    'Demographic Level',
    'Demographic Name',
    'indicator_label',
    'indicator_category_label',
    'Month_Week',
    'Week_ending',
    'Estimate',
    'CI_Half_width_95pct',
    'Unweighted Sample Size',
    'suppression_flag'
]

# Load under-18 vaccination csv
under_df = pd.read_csv(
    "REGION 9 Invent Health Project - VACCINATION UNDER 18.csv",
    header=None,
    names=col_names
)

# Load 18+ vaccination CSV (filter to the same 13 cols)
adult_df = pd.read_csv(
    "REGION 9 Invent Health Project - VACCINATION 18+.csv",
    usecols=col_names
)

# Convert date column
under_df['Week_ending'] = pd.to_datetime(under_df['Week_ending'])
adult_df['Week_ending'] = pd.to_datetime(adult_df['Week_ending'])

# Just kept rows for state-level Up-to-date is now Yes
under_states = under_df[
    (under_df['Geographic Level'] == 'State') &
    (under_df['indicator_label'] == 'Up-to-date') &
    (under_df['indicator_category_label'] == 'Yes')
].copy()

adult_states = adult_df[
    (adult_df['Geographic Level'] == 'State') &
    (adult_df['indicator_label'] == 'Up-to-date') &
    (adult_df['indicator_category_label'] == 'Yes')
].copy()

# Plot under-18 vaccination coverage by state
sns.set_theme(style="whitegrid")
plt.figure(figsize=(16, 8))

sns.lineplot(
    data=under_states,
    x='Week_ending',
    y='Estimate',
    hue='Geographic Name',
    errorbar=None
)

# Clean labels and format
plt.title("COVID-19 Vaccination Coverage by State (Under 18)")
plt.xlabel("Date")
plt.ylabel("Vaccination Rate (%)")
plt.xticks(rotation=0, ha='center')
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%m/%Y"))
plt.tight_layout()
plt.show()


# 7. Plot 18+ vaccination coverage by state
sns.set_theme(style="whitegrid")
plt.figure(figsize=(16, 8))

sns.lineplot(
    data=adult_states,
    x='Week_ending',
    y='Estimate',
    hue='Geographic Name',
    errorbar=None
)

# Clean labels and format
plt.title("COVID-19 Vaccination Coverage by State (18+)")
plt.xlabel("Date")
plt.ylabel("Vaccination Rate (%)")
plt.xticks(rotation=0, ha='center')
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%m/%Y"))
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates

#  Define the 13 columns shared by both vaccination files
col_names = [
    'Vaccine',
    'Geographic Level',
    'Geographic Name',
    'Demographic Level',
    'Demographic Name',
    'indicator_label',
    'indicator_category_label',
    'Month_Week',
    'Week_ending',
    'Estimate',
    'CI_Half_width_95pct',
    'Unweighted Sample Size',
    'suppression_flag'
]

# Load under-18 vaccination csv (Region 10) — skip the header row so names=col_names lines up
under_df = pd.read_csv(
    "REGION 10 Invent Health Project - VACCINATION UNDER 18 .csv",
    header=None,
    names=col_names,
    skiprows=1
)

# Load 18+ vaccination CSV (Region 10) — pull only those 13 cols
adult_df = pd.read_csv(
    "REGION 10 Invent Health Project - VACCINATION 18+.csv",
    usecols=col_names
)

# Convert date column
under_df['Week_ending'] = pd.to_datetime(under_df['Week_ending'])
adult_df ['Week_ending'] = pd.to_datetime(adult_df['Week_ending'])

# Just kept rows for state-level Up-to-date → Yes
under_states = under_df[
    (under_df['Geographic Level'] == 'State') &
    (under_df['indicator_label'] == 'Up-to-date') &
    (under_df['indicator_category_label'] == 'Yes')
].copy()

adult_states = adult_df[
    (adult_df['Geographic Level'] == 'State') &
    (adult_df['indicator_label'] == 'Up-to-date') &
    (adult_df['indicator_category_label'] == 'Yes')
].copy()

# Plot under-18 vaccination coverage by state
sns.set_theme(style="whitegrid")
plt.figure(figsize=(16, 8))

sns.lineplot(
    data=under_states,
    x='Week_ending',
    y='Estimate',
    hue='Geographic Name',
    errorbar=None
)

# Clean labels and format
plt.title("COVID-19 Vaccination Coverage by State (Under 18)")
plt.xlabel("Date")
plt.ylabel("Vaccination Rate (%)")
plt.xticks(rotation=0, ha='center')
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%m/%Y"))
plt.tight_layout()
plt.show()


# Plot 18+ vaccination coverage by state
sns.set_theme(style="whitegrid")
plt.figure(figsize=(16, 8))

sns.lineplot(
    data=adult_states,
    x='Week_ending',
    y='Estimate',
    hue='Geographic Name',
    errorbar=None
)

# Clean labels and format
plt.title("COVID-19 Vaccination Coverage by State (18+)")
plt.xlabel("Date")
plt.ylabel("Vaccination Rate (%)")
plt.xticks(rotation=0, ha='center')
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%m/%Y"))
plt.tight_layout()
plt.show()